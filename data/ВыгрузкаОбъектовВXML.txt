
Перем МетаданныеОписание Экспорт;
Перем СсылочныеТипы Экспорт;
Перем СоответствиеОбъектовМетаданныхИСсылочныхТипов;
Перем ОбработанныхКонстант Экспорт;
Перем ОбработанныхНаборовЗаписей Экспорт;
Перем мСоответствиеКолонокДвижений;

// массив строк дерева метаданных, имеющих признак Выгружать
Перем СоставПолнойВыгрузки Экспорт;
// массив строк дерева метаданных, имеющих признак выгрузки по ссылке
Перем СоставВспомогательнойВыгрузки;

// массив регистров, использующих итоги
Перем ИспользующиеИтоги;

Перем мТипРезультатЗапроса; 
Перем мТипДанныхУдаления;

Перем мВыгруженныеОбъекты;
Перем мКоличествоСохраненныхПоследнихВыгрузок;

Перем мНаличиеВыгрузкиПодчиненныхОбъектов; 


Процедура СообщитьПользователю(Текст)
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.Текст = Текст;
	Сообщение.Сообщить();
	
КонецПроцедуры

// Функция определяет общее количество произведенных записей констант + объектного типа + наборов записей
//
// Возврат - общее количество произведенных записей
Функция ВсегоОбработанныхЗаписей()
	
	Возврат мВыгруженныеОбъекты.Количество() + ОбработанныхКонстант + ОбработанныхНаборовЗаписей;
	
КонецФункции

Функция ПолучитьСтрокуОграниченияПоДатеДляЗапроса(ИмяТипа) Экспорт
	
	ИтоговоеОграничениеПоДате = "";
	ИмяАлиасаТаблицы = "_";
	
	Если НЕ (ИмяТипа = "Документ" ИЛИ ИмяТипа = "РегистрСведений" ИЛИ ИмяТипа = "Регистр") Тогда
		Возврат ИтоговоеОграничениеПоДате;
	КонецЕсли;
		
	ИмяПоляОграничения = ИмяАлиасаТаблицы + "." + ?(ИмяТипа = "Документ", "Дата", "Период");	
	
	Если ЗначениеЗаполнено(ПериодВыгружаемыхДанных.ДатаНачала) Тогда
		
		ИтоговоеОграничениеПоДате = "
		|	ГДЕ
		|		" + ИмяПоляОграничения + " >= &ДатаНачала";
		
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ПериодВыгружаемыхДанных.ДатаОкончания) Тогда
		
		Если ПустаяСтрока(ИтоговоеОграничениеПоДате) Тогда
			
			ИтоговоеОграничениеПоДате = "
			|	ГДЕ
			|		" + ИмяПоляОграничения + " <= &ДатаОкончания";
			
		Иначе
			
			ИтоговоеОграничениеПоДате = ИтоговоеОграничениеПоДате + "
			|	И
			|		" + ИмяПоляОграничения + " <= &ДатаОкончания";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИтоговоеОграничениеПоДате;
	
КонецФункции

Функция ПолучитьТекстЗапросаДляРегистраСведений(ИмяМетаданных, СтрокаПолейДляВыборки = "")
	
	
	ЕстьОграничениеПоДатам = ЗначениеЗаполнено(ПериодВыгружаемыхДанных.ДатаНачала) Или ЗначениеЗаполнено(ПериодВыгружаемыхДанных.ДатаОкончания);
	
	Если НЕ ЗначениеЗаполнено(СтрокаПолейДляВыборки) Тогда
		СтрокаПолейДляВыборки = "_.*";
	Иначе
		СтрокаПолейДляВыборки = " Различные " +  СтрокаПолейДляВыборки;	
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ Разрешенные " + СтрокаПолейДляВыборки + " ИЗ " + ИмяМетаданных + " КАК _ ";
	
	ТекстЗапроса = ТекстЗапроса + " ГДЕ Документ ССЫЛКА Документ.СчетНаОплатуПокупателю";
	
	Если ЕстьОграничениеПоДатам Тогда
		ТекстЗапроса = ТекстЗапроса + " И Документ.Дата Между &ДатаНачала И &ДатаОкончания";	
	КонецЕсли;	
	
	//Если ОбъектМетаданных.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
	//	Возврат ТекстЗапроса;
	//КонецЕсли;
	//
	//// 0 - отбор за период
	//// 1 - срез последних на дату окончания
	//// 2 - срез первых на дату начала
	//// 3 - срез последних на дату начала + отбор за период
	//
	//Если ТипВыгрузкиПериодическихРегистров = 0 Тогда
	//	
	//	Если ЕстьДопОтборы И 
	//		НЕ ИспользоватьОтборПоДатеДляВсехОбъектов Тогда
	//		
	//		Возврат ТекстЗапроса;
	//		
	//	КонецЕсли;
	//	
	//	ДопОграничениеПоДате = ПолучитьСтрокуОграниченияПоДатеДляЗапроса(ОбъектМетаданных, "РегистрСведений");
	//	
	//	ТекстЗапроса = ТекстЗапроса + Символы.ПС + ДопОграничениеПоДате;
	//	
	//ИначеЕсли ТипВыгрузкиПериодическихРегистров = 1 Тогда
	//	
	//	ТекстЗапроса = "ВЫБРАТЬ Разрешенные " + СтрокаПолейДляВыборки + " ИЗ " + ИмяМетаданных + ".СрезПоследних(&ДатаОкончания) КАК _ ";	
	//	
	//ИначеЕсли ТипВыгрузкиПериодическихРегистров = 2 Тогда
	//	
	//	ТекстЗапроса = "ВЫБРАТЬ Разрешенные " + СтрокаПолейДляВыборки + " ИЗ " + ИмяМетаданных + ".СрезПервых(&ДатаНачала) КАК _ ";
	//	
	//ИначеЕсли ТипВыгрузкиПериодическихРегистров = 3 Тогда
	//	
	//	ТекстЗапроса = "ВЫБРАТЬ Разрешенные " + СтрокаПолейДляВыборки + " ИЗ " + ИмяМетаданных + ".СрезПоследних(&ДатаНачала) КАК _ 
	//	|
	//	|Объединить все
	//	|
	//	|ВЫБРАТЬ " + СтрокаПолейДляВыборки + " ИЗ " + ИмяМетаданных + " КАК _ ";
	//	
	//	ДопОграничениеПоДате = ПолучитьСтрокуОграниченияПоДатеДляЗапроса(ОбъектМетаданных, "РегистрСведений");
	//	
	//	ТекстЗапроса = ТекстЗапроса + Символы.ПС + ДопОграничениеПоДате;
	//	
	//КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции


Функция ПолучитьТекстЗапросаПоСтроке(ОбъектМетаданных, СтрокаПолейДляВыборки, УчитыватьОграниченияПоДате) Экспорт
	
	//ОбъектМетаданных  = ОбъектМетаданных.Метаданные;
	//ИмяМетаданных     = ОбъектМетаданных.ПолноеИмя();
	ИмяМетаданных = ОбъектМетаданных;
	//
	Если Найти(ИмяМетаданных, "РегистрСведений") <> 0 Тогда
	//Если Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных) Тогда
	//	
		ТекстЗапроса = ПолучитьТекстЗапросаДляРегистраСведений(ИмяМетаданных, СтрокаПолейДляВыборки);
		Возврат ТекстЗапроса;
	//	
	//ИначеЕсли   Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных)
	//		ИЛИ Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных) Тогда
	//	
	//	ТекстЗапроса = ПолучитьТекстЗапросаДляРегистра(ИмяМетаданных, ОбъектМетаданных, ЕстьДопОтборы, СтрокаПолейДляВыборки);
	//	Возврат ТекстЗапроса;
	//	
	КонецЕсли;
	//
	ЕстьОграничениеПоДатам = УчитыватьОграниченияПоДате И (ЗначениеЗаполнено(ПериодВыгружаемыхДанных.ДатаНачала) Или ЗначениеЗаполнено(ПериодВыгружаемыхДанных.ДатаОкончания));
	//
	Если НЕ ЗначениеЗаполнено(СтрокаПолейДляВыборки) Тогда
		СтрокаПолейДляВыборки = "_.*";
	КонецЕсли;
	//
	ТекстЗапроса = "ВЫБРАТЬ Разрешенные " + СтрокаПолейДляВыборки + " ИЗ " + ИмяМетаданных + " КАК _ ";
	//
	//// возможно нужно ограничение по датам установить
	Если ЕстьОграничениеПоДатам Тогда
	//	
	//	Если ЕстьДопОтборы И 
	//		НЕ ИспользоватьОтборПоДатеДляВсехОбъектов Тогда
	//		
	//		Возврат ТекстЗапроса;
	//		
	//	КонецЕсли;
	//	
		ДопОграничениеПоДате = "";
	//	
	//	// можно ли для данного объекта МД сторить ограничения по датам
	//	Если Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
	//		
		ДопОграничениеПоДате = ПолучитьСтрокуОграниченияПоДатеДляЗапроса("Документ");
	//		
	//	ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных)
	//		ИЛИ Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных) Тогда
	//		
	//		ДопОграничениеПоДате = ПолучитьСтрокуОграниченияПоДатеДляЗапроса(ОбъектМетаданных, "Регистр");
	//		
	//	КонецЕсли;
	//	
		ТекстЗапроса = ТекстЗапроса + Символы.ПС + ДопОграничениеПоДате;
	//	
	КонецЕсли;
					
	Возврат  ТекстЗапроса;
	
КонецФункции

Функция ПодготовитьПостроительДляВыгрузки(ОбъектМетаданных, СтрокаПолейДляВыборки = "", УчитыватьОграниченияПоДате = Истина) Экспорт
	
	//ЕстьДопОтборы = (ОбъектМетаданных.НастройкиПостроителя <> Неопределено); 
	//
	ИтоговыйТекстЗапроса = ПолучитьТекстЗапросаПоСтроке(ОбъектМетаданных, СтрокаПолейДляВыборки, УчитыватьОграниченияПоДате);
	//
	ПостроительОтчета = Новый ПостроительОтчета;
	//
	ПостроительОтчета.Текст = ИтоговыйТекстЗапроса;
	//
	ПостроительОтчета.ЗаполнитьНастройки();
	//
	ПостроительОтчета.Отбор.Сбросить();
	//Если ЕстьДопОтборы Тогда
	//	
	//	ПостроительОтчета.УстановитьНастройки(ОбъектМетаданных.НастройкиПостроителя);
	//	
	//КонецЕсли;
	//
	ПостроительОтчета.Параметры.Вставить("ДатаНачала", ПериодВыгружаемыхДанных.ДатаНачала);
	ПостроительОтчета.Параметры.Вставить("ДатаОкончания", ПериодВыгружаемыхДанных.ДатаОкончания);
	
	Возврат ПостроительОтчета;
	
КонецФункции

Функция ПолучитьРезультатЗапросаСОграничениями(ОбъектМетаданных, УчитыватьОграниченияПоДате)
	
	ПостроительОтчета = ПодготовитьПостроительДляВыгрузки(ОбъектМетаданных,, УчитыватьОграниченияПоДате);

	ПостроительОтчета.Выполнить();
	РезультатЗапроса = ПостроительОтчета.Результат;
		
	Возврат РезультатЗапроса;
		
КонецФункции

Функция СсылкаВыгружена(Ссылка)
	
	Возврат мВыгруженныеОбъекты.Найти(Ссылка, "Ссылка") <> Неопределено;
	
КонецФункции

Процедура ДобавитьСсылкуКВыгруженным(Ссылка)
	
	СтрокаДобавления = мВыгруженныеОбъекты.Добавить();
	СтрокаДобавления.ссылка = Ссылка;	
		
КонецПроцедуры

Функция СоздатьОбъектЗаписиXMLДляПроверки()
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку("UTF-16");
	ЗаписьXML.ЗаписатьНачалоЭлемента("Проверка");
	
	Возврат ЗаписьXML;
	
КонецФункции

Процедура ВыполнитьВспомогательныеДействияДляЗаписиXML(ВсегоОбработаноОбъектов, ЗаписьXML, ТолькоПроверкаНедопустимыхСимволов)
	
	Если Не ТолькоПроверкаНедопустимыхСимволов Тогда
		Возврат;
	КонецЕсли;
	
	Если ВсегоОбработаноОбъектов > 1000 Тогда
		
		СтрокаРезультата = ЗаписьXML.Закрыть();
		СтрокаРезультата = Неопределено;
		ЗаписьXML = Неопределено;
		
		ЗаписьXML = СоздатьОбъектЗаписиXMLДляПроверки();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура записывает содержащиеся в выборке результата запроса объекты и необходимые "по ссылке" объекты ИБ
//
// Параметры
//   РезультатЗапроса - результат запроса
//   ЗаписьXML - объект, через которых происходит запись объектов ИБ
//   ЭтоЗапросПоОбъекту - если Истина, выборка должна содержать объекты, на которые может быть ссылка,
//             если Ложь, выгружать, как объект не нужно, только обработать возможные ссылки на др. объекты ИБ
//
Процедура ОбработкаРезультатаЗапроса(РезультатЗапроса, ЗаписьXML, НовыйПрефикс = "", ЭтоЗапросПоОбъекту = Ложь, 
	ЗапросВерхнегоУровня = Ложь, ОбъектыВыгруженныеСОшибками = Неопределено, ТолькоПроверкаНедопустимыхСимволов = Ложь)
	
	ВыборкаИзРезультатовЗапроса = РезультатЗапроса.Выбрать();
	
	ВсегоОбработаноОбъектов = 0;
	ОбработаноОбъектов = 0;
	ОбработанныхКонстант = 0;
	ОбработанныхНаборовЗаписей = 0;
	
	Пока ВыборкаИзРезультатовЗапроса.Следующий() Цикл
		Если ЭтоЗапросПоОбъекту Тогда
			// выгрузка ссылочных объектов
			Ссылка = ВыборкаИзРезультатовЗапроса.Ссылка;
			Если СсылкаВыгружена(Ссылка) Тогда Продолжить; КонецЕсли;
			ДобавитьСсылкуКВыгруженным(Ссылка);
			ВсегоОбработаноОбъектов = ВсегоОбработанныхЗаписей();
		КонецЕсли;
		
		//Если мНаличиеВыгрузкиПодчиненныхОбъектов Тогда
		//
		//	// перебираем колонки запроса в поисках ссылочных значений, которые, возможно, нужно выгрузить
		//	Для Каждого КолонкаЗапроса Из РезультатЗапроса.Колонки Цикл
		//		
		//		ЗначениеКолонки = ВыборкаИзРезультатовЗапроса[КолонкаЗапроса.Имя];
		//		
		//		Если ТипЗнч(ЗначениеКолонки) = мТипРезультатЗапроса Тогда
		//			
		//			ОбработкаРезультатаЗапроса(ЗначениеКолонки, ЗаписьXML, , , ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов);
		//			
		//		Иначе
		//		
		//			ЗаписатьЗначениеПриНеобходимости(ЗначениеКолонки, ЗаписьXML, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов);
		//			
		//		КонецЕсли;
		//		
		//	КонецЦикла;
		//	
		//КонецЕсли;
		
		Если ЭтоЗапросПоОбъекту Тогда
			Объект = Ссылка.ПолучитьОбъект();
			Попытка
				//ВыполнитьВспомогательныеДействияДляЗаписиXML(ВсегоОбработаноОбъектов, ЗаписьXML, ТолькоПроверкаНедопустимыхСимволов);
				
				Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда 
					
					Журнал.ДобавитьСтроку("Выгружен счет покупателю №" + Объект.Номер);
					Если (НовыйПрефикс <> "") Тогда
						ДлинаПрефикса = СтрДлина(НовыйПрефикс);
						Объект.Номер = НовыйПрефикс + Прав(Объект.Номер, СтрДлина(Объект.Номер) - ДлинаПрефикса);
					КонецЕсли;
					
				КонецЕсли; 				
				ЗаписатьXML(ЗаписьXML, Объект);
	//			Если ВыгружатьСДокументомЕгоДвижения
	//				И Метаданные.Документы.Содержит(Объект.Метаданные()) Тогда
	//				
	//				// выгрузка движений документа
	//				Для Каждого Движение Из Объект.Движения Цикл
	//					
	//					Движение.Прочитать();
	//					
	//					Если мНаличиеВыгрузкиПодчиненныхОбъектов
	//						И Движение.Количество() > 0 Тогда
	//						
	//						ТипРегистра = Тип(Движение);
	//						
	//						МассивКолонок = мСоответствиеКолонокДвижений.Получить(ТипРегистра);
	//
	//						Если МассивКолонок = Неопределено Тогда
	//							
	//							ТаблицаДвижений = Движение.Выгрузить();
	//							РегистрБухгалтерии = Метаданные.РегистрыБухгалтерии.Содержит(Движение.Метаданные());
	//							МассивКолонок = ПолучитьМассивКолонокДвижения(ТаблицаДвижений, РегистрБухгалтерии);
	//							мСоответствиеКолонокДвижений.Вставить(ТипРегистра, МассивКолонок);	
	//							
	//						КонецЕсли;
	//						
	//						ВыгрузитьПодчиненныеЗначенияНабора(ЗаписьXML, Движение, МассивКолонок, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов);
	//						
	//					КонецЕсли;
	//					
	//					ЗаписатьXML(ЗаписьXML, Движение);	
	//					
	//				КонецЦикла;
	//				
	//			КонецЕсли;
				
			Исключение
				
				ТекстОшибки = ОписаниеОшибки();
				//Если НЕ ПродолжитьЗагрузкуВСлучаеВозникновенияОшибки Тогда
				//	
				//	ВосстановитьИспользованиеИтогов();
				//	ВызватьИсключение;
				//	
				//Иначе
				//Попытка
				//	СообщениеОбОшибке = "Ошибка при загрузке данных. Объект: " + ЗаписанноеЗначение + ", Тип: " + ТипЗнч(ЗаписанноеЗначение) + " Ошибка : " + ТекстОшибки;
				//	//Сообщить(СообщениеОбОшибке, СтатусСообщения.Важное);
				//	Журнал.ДобавитьСтроку(СообщениеОбОшибке);
				//Исключение
				СообщениеОбОшибке = "Ошибка при загрузке данных. Ошибка : " + ТекстОшибки;
				Журнал.ДобавитьСтроку(СообщениеОбОшибке);
					//Сообщить(СообщениеОбОшибке, СтатусСообщения.Важное);
				//КонецПопытки;	
				
				
				//СтрокаОписанияОшибки = ОписаниеОшибки();
				//не смогли записать в XML
				// возможно проблема с недопустимыми символами в XML
				Если ТолькоПроверкаНедопустимыхСимволов Тогда
					
					Если ОбъектыВыгруженныеСОшибками.Получить(Ссылка) = Неопределено Тогда
						ОбъектыВыгруженныеСОшибками.Вставить(Ссылка, ТекстОшибки);
					КонецЕсли;					
					
				Иначе
					//ИтоговаяСтрокаСообщения = "Ошибка при выгрузке объекта: " + Строка(Объект) + " Тип: " + Строка(ТипЗнч(Объект)) + "
					//|" + СтрокаОписанияОшибки;
					//Сообщить(ИтоговаяСтрокаСообщения);
					ВызватьИсключение ТекстОшибки;
				КонецЕсли;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьМассивКолонокДвижения(ТаблицаДвижений)
	
	МассивКолонок = Новый Массив();
	Для Каждого КолонкаТаблицы Из ТаблицаДвижений.Колонки Цикл
		//Если КолонкаТаблицы.Имя = "МоментВремени"
		//	ИЛИ Найти(КолонкаТаблицы.Имя, "ВидСубконтоДт") = 1
		//	ИЛИ Найти(КолонкаТаблицы.Имя, "ВидСубконтоКт") = 1 Тогда
		//	
		//	Продолжить;
		//	
		//КонецЕсли;
		//
		//Если Найти(КолонкаТаблицы.Имя, "СубконтоДт") = 1 И РегистрБухгалтерии Тогда
		//	
		//	Если МассивКолонок.Найти("СубконтоДт") = Неопределено Тогда
		//		МассивКолонок.Добавить("СубконтоДт");	
		//	Конецесли;
		//	
		//	Продолжить;
		//	
		//КонецЕсли;
		//
		//Если Найти(КолонкаТаблицы.Имя, "СубконтоКт") = 1 И РегистрБухгалтерии Тогда
		//	
		//	Если МассивКолонок.Найти("СубконтоКт") = Неопределено Тогда
		//		МассивКолонок.Добавить("СубконтоКт");	
		//	КонецЕсли;
		//	
		//	Продолжить;
		//	
		//КонецЕсли;
		МассивКолонок.Добавить(КолонкаТаблицы.Имя);
	КонецЦикла;
	Возврат МассивКолонок;
КонецФункции

// Процедура записывает данные, доступ к которым осуществляется через набор записей
//
// Параметры
//   ЗаписьXML - объект, через которых происходит запись объектов ИБ
//   СтрокаДереваМетаданных - строка дерева метаданных, соответствующая регистру
//
Процедура ЗаписьЧерезНаборЗаписей(ЗаписьXML, ИмяОбъекта, ОбъектыВыгруженныеСОшибками)
	
	//// получить состав колонок записи регистра и проверить наличие хотя бы одной записи
	//Если ИмяТаблицы = "РегистрБухгалтерии." Тогда
	//	ИмяТаблицыИмяТаблицы = ИмяТаблицы + ИмяОбъекта + ".ДвиженияССубконто";	
	//Иначе
	//	ИмяТаблицыИмяТаблицы = ИмяТаблицы + ИмяОбъекта;	
	//КонецЕсли;
	Псевдоним = "СтатусыДокументов";
	ВсегоОбработаноОбъектов = 0;
	ОбработаноОбъектов = 0;
	ОбработанныхКонстант = 0;
	ОбработанныхНаборовЗаписей = 0;
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1 * ИЗ " + ИмяОбъекта + " КАК " + Псевдоним);
	РезультатЗапросаПоСоставу = Запрос.Выполнить();
	Если РезультатЗапросаПоСоставу.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДвижений = РезультатЗапросаПоСоставу.Выгрузить();
	МассивКолонок = ПолучитьМассивКолонокДвижения(ТаблицаДвижений);
	
	// выгрузка регистров осуществляется через его набор записей
	НаборЗаписей = РегистрыСведений.СтатусыДокументов.СоздатьНаборЗаписей();
	//МенеджерНабораЗаписей.СоздатьНаборЗаписей();
	
	Отбор = НаборЗаписей.Отбор;
	СтрокаПолейОтбора = "";
	Для Каждого ЭлементОтбора Из Отбор Цикл 
		Если Не ПустаяСтрока(СтрокаПолейОтбора) Тогда 
			СтрокаПолейОтбора = СтрокаПолейОтбора + ",";
		КонецЕсли;
		СтрокаПолейОтбора = СтрокаПолейОтбора + ЭлементОтбора.Имя;
	КонецЦикла;
	
	ПостроительОтчета = ПодготовитьПостроительДляВыгрузки(ИмяОбъекта, СтрокаПолейОтбора); 
	ПостроительОтчета.Выполнить();
	РезультатЗапросаПоЗначениямОтбора = ПостроительОтчета.Результат;	
	ВыборкаИзРезультата = РезультатЗапросаПоЗначениямОтбора.Выбрать();
	
	КоличествоПолейОтбора = НаборЗаписей.Отбор.Количество();
	
	// читаем наборы записей с различным составом отбора и записываем их
	Пока ВыборкаИзРезультата.Следующий() Цикл
		
		// Отбор устанавливаем для регистров, у которых есть хотя бы один отбор (измерение)
		Если КоличествоПолейОтбора <> 0 Тогда
			
			Для Каждого Колонка Из РезультатЗапросаПоЗначениямОтбора.Колонки Цикл 
				Отбор[Колонка.Имя].Значение = ВыборкаИзРезультата[Колонка.Имя];
				Отбор[Колонка.Имя].ВидСравнения = ВидСравнения.Равно;
				Отбор[Колонка.Имя].Использование = Истина;
			КонецЦикла;
			
		КонецЕсли;
		
		НаборЗаписей.Прочитать();
		
		//Если мНаличиеВыгрузкиПодчиненныхОбъектов Тогда
		//
		//	// проверяем все записанные в наборе значения на необходимость записи "по ссылке"
		//	ВыгрузитьПодчиненныеЗначенияНабора(ЗаписьXML, НаборЗаписей, МассивКолонок, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов);
		//							
		//КонецЕсли;
		
		ВсегоОбработаноОбъектов = ВсегоОбработанныхЗаписей();
		Попытка
			//ВыполнитьВспомогательныеДействияДляЗаписиXML(ВсегоОбработаноОбъектов, ЗаписьXML, ТолькоПроверкаНедопустимыхСимволов);
			ЗаписатьXML(ЗаписьXML, НаборЗаписей);			
		Исключение
			СтрокаОписанияОшибки = ОписаниеОшибки();
			//не смогли записать в XML
			// возможно проблема с недопустимыми символами в XML
			//Если ТолькоПроверкаНедопустимыхСимволов Тогда
			//	
			//	НовыйНабор = МенеджерНабораЗаписей.СоздатьНаборЗаписей();
			//	
			//	Для Каждого СтрокаОтбора Из НаборЗаписей.Отбор Цикл
			//		
			//		СтрокаОтбораФормы = НовыйНабор.Отбор.Найти(СтрокаОтбора.Имя);
			//		
			//		Если СтрокаОтбораФормы = Неопределено Тогда
			//			Продолжить;
			//		КонецЕсли;
			//		
			//		СтрокаОтбораФормы.Использование = СтрокаОтбора.Использование;
			//		СтрокаОтбораФормы.ВидСравнения = СтрокаОтбора.ВидСравнения;
			//		СтрокаОтбораФормы.Значение = СтрокаОтбора.Значение;
			//		
			//	КонецЦикла;
			//	
			//	ОбъектыВыгруженныеСОшибками.Вставить(НовыйНабор, СтрокаОписанияОшибки);
			//									
			//Иначе
				
				ИтоговаяСтрокаСообщения = "Ошибка при выгрузке набора записей регистра: " + ИмяОбъекта + "
				|" + СтрокаОписанияОшибки;
				
				Сообщить(ИтоговаяСтрокаСообщения);
				
				ВызватьИсключение ИтоговаяСтрокаСообщения;
			//КонецЕсли;
		КонецПопытки;
		ОбработанныхНаборовЗаписей = ОбработанныхНаборовЗаписей + 1;
	КонецЦикла;
КонецПроцедуры


Процедура ЗаписьРегистра(ЗаписьXML, ОбъектМетаданных, ОбъектыВыгруженныеСОшибками)
	
	//МенеджерНабораЗаписей = СтрокаДереваМетаданных.ЭлементОписания.Менеджер[СтрокаДереваМетаданных.ОбъектМД.Имя];
	//МенеджерНабораЗаписей = РегистрыСведений.СтатусыДокументов.СоздатьНаборЗаписей();
	
	//ИмяТаблицыДляЗапроса = "РегистрСведений.";
		
	ЗаписьЧерезНаборЗаписей(ЗаписьXML, ОбъектМетаданных, ОбъектыВыгруженныеСОшибками);
КонецПроцедуры

Функция ПолучитьСчетПоНомеру(НомерСчета)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СчетНаОплатуПокупателю.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СчетНаОплатуПокупателю КАК СчетНаОплатуПокупателю
		|ГДЕ
		|	СчетНаОплатуПокупателю.Номер = &Номер";
	
	Запрос.УстановитьПараметр("Номер", НомерСчета);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка.ПолучитьОбъект();
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции

Функция ДоговораРазличаются(Договор1, Договор2)
	Возврат (Договор1.Наименование <> Договор2.Наименование) ИЛИ
	(Договор1.Номер <> Договор2.Номер) ИЛИ
	(Договор1.Организация.Наименование <> Договор2.Организация.Наименование);
КонецФункции
		

// Процедура записывает наборы записей регистра (накопления, бухгалтерии...)
//
// Параметры
//   ЗаписьXML - объект, через которых происходит запись объектов ИБ
//
Процедура ВыгрузкаДанных(ЗаписьXML, ВыгружаемыеОбъектыМетаданных, НовыйПрефикс = "", ОбъектыВыгруженныеСОшибками = Неопределено)
	
	мВыгруженныеОбъекты = Новый ТаблицаЗначений;
	мВыгруженныеОбъекты.Колонки.Добавить("Ссылка");
	мВыгруженныеОбъекты.Индексы.Добавить("Ссылка");
	//
	//
	//Если ОбъектыВыгруженныеСОшибками = Неопределено Тогда
	ОбъектыВыгруженныеСОшибками = Новый Соответствие;
	//КонецЕсли;
	//
	Попытка
		//СтрокаДереваМетаданных = "Счет покупателю";
		
		//Для Каждого СтрокаТаблицыВыгрузки Из СоставПолнойВыгрузки Цикл
		//	
		//	СтрокаДереваМетаданных = СтрокаТаблицыВыгрузки.СтрокаДерева;
		//	
		//	Если СтрокаДереваМетаданных.ЭлементОписания.Менеджер = Неопределено Тогда
		//		ВызватьИсключение("Выгрузка данных. Внутренняя ошибка");
		//	КонецЕсли;
		//	
		//	Если Метаданные.Константы.Содержит(СтрокаДереваМетаданных.ОбъектМД) Тогда
		//		
		//		ЗаписьКонстанты(ЗаписьXML, СтрокаДереваМетаданных.ОбъектМД, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов);
		//		
		//	ИначеЕсли Метаданные.РегистрыСведений.Содержит(СтрокаДереваМетаданных.ОбъектМД) Или 
		//		Метаданные.РегистрыНакопления.Содержит(СтрокаДереваМетаданных.ОбъектМД) Или
		//		Метаданные.РегистрыРасчета.Содержит(СтрокаДереваМетаданных.ОбъектМД) Тогда
		//		
		//		ЗаписьРегистра(ЗаписьXML, СтрокаДереваМетаданных, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов);
		//		
		//	ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(СтрокаДереваМетаданных.ОбъектМД) Тогда
		//		
		//		ЗаписьРегистра(ЗаписьXML, СтрокаДереваМетаданных, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов, Истина);
		//		
		//	ИначеЕсли ТипЗнч(СтрокаДереваМетаданных.ЭлементОписания.Менеджер) = Тип("Строка") Тогда
		//		// специальный случай для перерасчетов
		//		ЗаписьПерерасчета(ЗаписьXML, СтрокаДереваМетаданных, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов);
		//		
		//	ИначеЕсли Метаданные.Последовательности.Содержит(СтрокаДереваМетаданных.ОбъектМД) Тогда 
		//		
		//		ЗаписьПоследовательности(ЗаписьXML, СтрокаДереваМетаданных, ОбъектыВыгруженныеСОшибками, ТолькоПроверкаНедопустимыхСимволов);
		//		
		//	Иначе
		// ---------------- ЗаписьДанныхОбъектногоТипа(СтрокаДереваМетаданных, ЗаписьXML, ОбъектыВыгруженныеСОшибками);
		ЗапросВерхнегоУровня = Истина;
		ЭтоЗапросПоОбъекту = Истина;
		
		Для Каждого ОбъектМетаданных Из ВыгружаемыеОбъектыМетаданных Цикл
			Если Найти(ОбъектМетаданных, "РегистрСведений.") <> 0 Тогда
				ЗаписьЧерезНаборЗаписей(ЗаписьXML, ОбъектМетаданных, ОбъектыВыгруженныеСОшибками);
			Иначе
			//РезультатЗапроса = ПолучитьРезультатЗапросаСОграничениями(СтрокаДереваМетаданных);
			    ЕстьОграниченияПоДате = (Найти(ОбъектМетаданных, "Справочник.") = 0);
				РезультатЗапроса = ПолучитьРезультатЗапросаСОграничениями(ОбъектМетаданных, ЕстьОграниченияПоДате);
				ОбработкаРезультатаЗапроса(РезультатЗапроса, ЗаписьXML, НовыйПрефикс, ЭтоЗапросПоОбъекту, ЗапросВерхнегоУровня, ОбъектыВыгруженныеСОшибками);
			КонецЕсли;
		КонецЦикла;
		//		
		//	КонецЕсли;
		//
		//КонецЦикла;
		
		//ДополнительныеОбъектыДляВыгрузки.Сортировать("ИмяОбъектаДляЗапроса");
		//ТекущийМассивСсылок = Новый Массив();
		//ТекущееИмяЗапроса = "";
		//
		//Для Каждого СтрокаТаблицыВыгрузки Из ДополнительныеОбъектыДляВыгрузки Цикл
		//	
		//	Если НЕ ЗначениеЗаполнено(СтрокаТаблицыВыгрузки.Объект)
		//		ИЛИ НЕ ЗначениеЗаполнено(СтрокаТаблицыВыгрузки.ИмяОбъектаДляЗапроса) Тогда
		//		
		//		Продолжить;
		//		
		//	КонецЕсли;
		//	
		//	Если ТекущееИмяЗапроса <> СтрокаТаблицыВыгрузки.ИмяОбъектаДляЗапроса Тогда
		//		
		//		ВыгрузитьДанныеМассиваСсылок(ТекущийМассивСсылок, ТекущееИмяЗапроса, ЗаписьXML, ТолькоПроверкаНедопустимыхСимволов, ОбъектыВыгруженныеСОшибками);
		//		
		//		ТекущийМассивСсылок = Новый массив();
		//		ТекущееИмяЗапроса = СтрокаТаблицыВыгрузки.ИмяОбъектаДляЗапроса;
		//		
		//	КонецЕсли;
		//	
		//	ТекущийМассивСсылок.Добавить(СтрокаТаблицыВыгрузки.Объект);
		//	
		//КонецЦикла;
		//
		//ВыгрузитьДанныеМассиваСсылок(ТекущийМассивСсылок, ТекущееИмяЗапроса, ЗаписьXML, ТолькоПроверкаНедопустимыхСимволов, ОбъектыВыгруженныеСОшибками);
		
	Исключение
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры


// Процедура создает файл выгрузки
//
// Параметры
//   ИмяФайла - имя файла выгрузки
//
Процедура ВыполнитьВыгрузку(ИмяФайла, УИД, НовыйПрефикс = "", ИмяЖурнала = "") Экспорт
	//ИмяВременногоФайла = ПолучитьИмяВременногоФайла(".xml");
	ИмяВременногоФайла = ИмяФайла;
	
	Журнал = Новый ТекстовыйДокумент;
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ИмяВременногоФайла, "UTF-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("_1CV8DtUD", "http://www.1c.ru/V8/1CV8DtUD/");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("V8Exch", "http://www.1c.ru/V8/1CV8DtUD/");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("v8",  "http://v8.1c.ru/data");
	ЗаписьXML.ЗаписатьНачалоЭлемента("V8Exch:Data");
	//Сообщить(Нстр("ru = 'Начало выгрузки файла " + ИмяВременногоФайла + ": '") + Формат(ТекущаяДата(),"ДЛФ=DT"));
	//Сообщить(Нстр("ru = 'Начало выгрузки: '") + Формат(ТекущаяДата(),"ДЛФ=DT"));
	
	Журнал.ДобавитьСтроку(Формат(ТекущаяДата(),"ДЛФ=DT") + ": начало выгрузки файла " + ИмяФайла);
	
	ВыгружаемыеОбъектыМетаданных = Новый СписокЗначений;
	
	Если Найти(ИмяФайла, "payments") <> 0 Тогда
		ВыгружаемыеОбъектыМетаданных.Добавить("Документ.СчетНаОплатуПокупателю");
		Журнал.ДобавитьСтроку("Выгрузка счетов на оплату покупателю");
	ИначеЕсли Найти(ИмяФайла, "References") <> 0 Тогда
		ВыгружаемыеОбъектыМетаданных.Добавить("Справочник.БанковскиеСчета");
		ВыгружаемыеОбъектыМетаданных.Добавить("Справочник.Валюты");
		ВыгружаемыеОбъектыМетаданных.Добавить("Справочник.ДоговорыКонтрагентов");
		ВыгружаемыеОбъектыМетаданных.Добавить("Справочник.Контрагенты");
		ВыгружаемыеОбъектыМетаданных.Добавить("Справочник.Номенклатура");
		ВыгружаемыеОбъектыМетаданных.Добавить("Справочник.Организации");
		Журнал.ДобавитьСтроку("Выгрузка справочников");
	Иначе
		ВыгружаемыеОбъектыМетаданных.Добавить("РегистрСведений.СтатусыДокументов");
		Журнал.ДобавитьСтроку("Выгрузка статусов счетов на оплату");
	КонецЕсли;
	//	
	ВыгрузкаДанных(ЗаписьXML, ВыгружаемыеОбъектыМетаданных, НовыйПрефикс);
	//	
	ЗаписьXML.ЗаписатьКонецЭлемента(); //V8Exc:Data
	ЗаписьXML.ЗаписатьКонецЭлемента(); //V8Exc:_1CV8DtUD
	ЗаписьXML.Закрыть();
	//	
	//КонецЕсли;	
	//
	//Если НЕ ТолькоПроверкаНедопустимыхСимволов Тогда
	//СообщитьПользователю(Нстр("ru = 'Выгружено объектов: '") + ВсегоОбработанныхЗаписей());
	//СообщитьПользователю(Нстр("ru = 'Окончание выгрузки: '") + ТекущаяДатаСеанса());
	//СообщитьПользователю(Нстр("ru = 'Выгрузка данных успешно завершена'"));
	
//---------------------------------------------------------------------------	
	//Журнал.ДобавитьСтроку(Строка(ВсегоОбработанныхЗаписей()) + " записей");
	Журнал.ДобавитьСтроку("Выгружено объектов: " + ВсегоОбработанныхЗаписей());
	Журнал.ДобавитьСтроку("Окончание выгрузки: " + Формат(ТекущаяДата(),"ДЛФ=DT"));
	Журнал.ДобавитьСтроку("-------------------------------------------------------------------");
	//КонецЕсли;
	
	//Иначе
	//	СообщитьПользователю(Нстр("ru = 'Проверено объектов: '") + ВсегоОбработанныхЗаписей());
	//	СообщитьПользователю(Нстр("ru = 'Окончание проверки: '") + ТекущаяДатаСеанса());
	//КонецЕсли;
   	// передаем заполненный на сервере файлик назад на клиент через временноехранилище:    
   	Если ИмяЖурнала <> "" Тогда
	   //ИмяЖурнала = ПолучитьИмяВременногоФайла("log");
	   Журнал.Записать(ИмяЖурнала, );    // кодировка???
   КонецЕсли;
   
   
	//Адреса = Новый Массив;
	//
	//Двоичное=Новый ДвоичныеДанные(ИмяВременногоФайла);  // получаем двоичные данные из файла
	//Адрес = ПоместитьВоВременноеХранилище(Двоичное, УИД); // кидаем двоичные данные во врем. хранилище
	//Адреса.Добавить(Адрес);
	//
	//Двоичное=Новый ДвоичныеДанные(ИмяЖурнала);  // получаем двоичные данные из файла
	//Адрес = ПоместитьВоВременноеХранилище(Двоичное, УИД); // кидаем двоичные данные во врем. хранилище
	//Адреса.Добавить(Адрес);
	//
	//Возврат Адреса;
	//   Двоичное=Новый ДвоичныеДанные(ИмяВременногоФайла);  // получаем двоичные данные из файла
	//Возврат ПоместитьВоВременноеХранилище(Двоичное, УИД); // кидаем двоичные данные во врем. хранилище
	
КонецПроцедуры


// Процедура разбирает файл выгрузки и осуществляет запись в ИБ сохраненных
// там объектов
//
// Параметры
//   ИмяФайла - имя файла выгрузки
//
Функция ВыполнитьЗагрузку(АдресХранилищаФайлаЗагрузки, ОбновлятьОбъектыВБазеДаннымиИзФайла) Экспорт
#Область Читаем_Данные_Из_Хранилища_И_Готовим_Журнал
	Данные = ПолучитьИзВременногоХранилища(СокрЛП(АдресХранилищаФайлаЗагрузки));
	ВременныйФайл = КаталогВременныхФайлов() + "source.xml";
    Данные.Записать(ВременныйФайл);
	УдалитьИзВременногоХранилища(АдресХранилищаФайлаЗагрузки);
	
	//Файл = Новый Файл(ИмяФайла);
	//ФайлВФорматеFastInfoSet = (Файл.Расширение = ".fi");
	//
	//Если ФайлВФорматеFastInfoSet Тогда
	//	
	//	// распаковка файла правил
	//	ЧтениеXML = Новый ЧтениеFastInfoset;
	//	ЧтениеXML.Прочитать();
	//	ЛокальноеИмя = "V8Exch:Data";
	//	
	//Иначе
	Журнал = Новый ТекстовыйДокумент;
	ИмяЖурнала = ПолучитьИмяВременногоФайла("log");
	Адреса = Новый Массив;
#КонецОбласти

#Область Проверяем_Можно_ли_читать_xml
	ЧтениеXML = Новый ЧтениеXML;
	ЛокальноеИмя = "Data";
	
	//КонецЕсли;
	
	ЧтениеXML.ОткрытьФайл(ВременныйФайл);
	// проверка формата файла обмена
	Если Не ЧтениеXML.Прочитать()
		Или ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента
		Или ЧтениеXML.ЛокальноеИмя <> "_1CV8DtUD"
		Или ЧтениеXML.URIПространстваИмен <> "http://www.1c.ru/V8/1CV8DtUD/" Тогда
		
		СообщитьПользователю(Нстр("ru = 'Неверный формат файла выгрузки'"));
		Журнал.ДобавитьСтроку("Неверный формат файла выгрузки");

		Перейти ~ЗаписатьЖурналИВыйти;
		//Возврат Неопределено;
		
	КонецЕсли;
	
	Если Не ЧтениеXML.Прочитать()
		Или ЧтениеXML.ТипУзла <> ТипУзлаXML.НачалоЭлемента
		Или ЧтениеXML.ЛокальноеИмя <> ЛокальноеИмя Тогда
		
		СообщитьПользователю(Нстр("ru = 'Неверный формат файла выгрузки'"));
		Журнал.ДобавитьСтроку("Неверный формат файла выгрузки");
		Перейти ~ЗаписатьЖурналИВыйти;
		//Возврат Неопределено;
		
	КонецЕсли;
	
	// чтение и запись в ИБ записанных в выгрузке объектов
	Если Не ЧтениеXML.Прочитать() Тогда 
		
		СообщитьПользователю(Нстр("ru = 'Неверный формат файла выгрузки'"));
		Журнал.ДобавитьСтроку("Неверный формат файла выгрузки");
		Перейти ~ЗаписатьЖурналИВыйти;
		
		//Возврат;
		
	КонецЕсли;
#КонецОбласти


	Загружено = 0;
	
	СообщитьПользователю(Нстр("ru = 'Начало загрузки: '") + ТекущаяДатаСеанса());
	
	Журнал.ДобавитьСтроку(Формат(ТекущаяДата(),"ДЛФ=DT") + ": начало загрузки файла " + ВременныйФайл);

#Область Читаем_XML_объекты_и_записываем_их_в_базу	
	Пока ВозможностьЧтенияXML(ЧтениеXML) Цикл
		
		Попытка
			ЗаписанноеЗначение = ПрочитатьXML(ЧтениеXML);
		Исключение
			//ВосстановитьИспользованиеИтогов();
			ВызватьИсключение;
		КонецПопытки;
		
		//Если ПриЗагрузкеИспользоватьРежимОбменаДанными Тогда
		
		Попытка // Планы обмена свойства ОбменДанными не имеют
			ЗаписанноеЗначение.ОбменДанными.Загрузка = Истина;
		Исключение
		КонецПопытки;
		
		//КонецЕсли;
#Область Чтение_и_запись_счета_на_оплату_покупателю		
		// ------------------------------------------------------------------------------------------
		// выясняем, загружается ли счет на оплату покупателю
		Если ТипЗнч(ЗаписанноеЗначение) = Тип("ДокументОбъект.СчетНаОплатуПокупателю") Тогда
			Журнал.ДобавитьСтроку("Из Файла прочитан счет № " + ЗаписанноеЗначение.Номер);
			// если да, находим этот счет в базе по его номеру
			СчетВБазе = ПолучитьСчетПоНомеру(ЗаписанноеЗначение.Номер);
			//Документы.СчетНаОплатуПокупателю.НайтиПоНомеру(ЗаписанноеЗначение.Номер);
			
			Если СчетВБазе <> НЕОПРЕДЕЛЕНО Тогда   // этот счет уже есть в базе
				Журнал.ДобавитьСтроку("Этот же счет найден в базе");
				Журнал.ДобавитьСтроку("------------------------------------------");
				// нашли, сопоставлем договора
				Если ОбновлятьОбъектыВБазеДаннымиИзФайла Тогда
			//---------------------------------- обновляем счет в базе данными из файла --------------------		
					
					Если ДоговораРазличаются(СчетВБазе.ДоговорКонтрагента, ЗаписанноеЗначение.ДоговорКонтрагента) Тогда
						СчетВБазе.ДоговорКонтрагента = ЗаписанноеЗначение.ДоговорКонтрагента;
						Журнал.ДобавитьСтроку("Из файла обновлены данные договора");
					КонецЕсли;	
					Если СчетВБазе.СуммаДокумента <> ЗаписанноеЗначение.СуммаДокумента Тогда
						СчетВБазе.СуммаДокумента = ЗаписанноеЗначение.СуммаДокумента;
						Журнал.ДобавитьСтроку("Из файла обновлена сумма документа");
					КонецЕсли;
			// ----------------------- работаем с номенклатурой в табличной части Товары
			
			// Очищаем исходную таблицу Товары
			СчетВБазе.Товары.Очистить();
			
			//Получаем Табличную часть из xml
			ТЗ = ЗаписанноеЗначение.Товары.Выгрузить();
			
			// Записываем в счет в базе
			СчетВБазе.Товары.Загрузить(ТЗ);
			//-------------- записываем изменения -----------------------------------------		
					Если СчетВБазе.Проведен Тогда 
						РежимЗаписи = РежимЗаписиДокумента.Проведение;
					Иначе
						РежимЗаписи = РежимЗаписиДокумента.Запись;
					КонецЕсли;
					СчетВБазе.Записать(РежимЗаписи, РежимПроведенияДокумента.Неоперативный);
					Журнал.ДобавитьСтроку("Изменения успешно сохранены");
					Журнал.ДобавитьСтроку("------------------------------------------");
				КонецЕсли;	
			Иначе	// Этого счета в базе нет, просто записываем
				Попытка              // записываем прочитаенное из файла в базу
					
					ЗаписанноеЗначение.Записать();
					
					Если ЗаписанноеЗначение.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка() Тогда
						
						СчетВБазе = ПолучитьСчетПоНомеру(ЗаписанноеЗначение.Номер);
			
						Если СчетВБазе <> НЕОПРЕДЕЛЕНО Тогда   // этот счет уже есть в базе
							СчетВБазе.Проведен = Ложь;
							СчетВБазе.Записать(РежимЗаписиДокумента.Запись);
						КонецЕсли;
					КонецЕсли;
					
						
				Исключение
					ТекстОшибки = ОписаниеОшибки();
					//Если НЕ ПродолжитьЗагрузкуВСлучаеВозникновенияОшибки Тогда
					//	
					//	ВосстановитьИспользованиеИтогов();
					//	ВызватьИсключение;
					//	
					//Иначе
					Попытка
						СообщениеОбОшибке = "Ошибка при загрузке данных. Объект: " + ЗаписанноеЗначение + ", Тип: " + ТипЗнч(ЗаписанноеЗначение) + " Ошибка : " + ТекстОшибки;
						Сообщить(СообщениеОбОшибке, СтатусСообщения.Важное);
						Журнал.ДобавитьСтроку(СообщениеОбОшибке);
					Исключение
						СообщениеОбОшибке = "Ошибка при загрузке данных. Ошибка : " + ТекстОшибки;
						Журнал.ДобавитьСтроку(СообщениеОбОшибке);
						Сообщить(СообщениеОбОшибке, СтатусСообщения.Важное);
					КонецПопытки;	
					
					//КонецЕсли;
					Загружено = Загружено - 1;
				КонецПопытки;	
				
				Загружено = Загружено + 1;
				Журнал.ДобавитьСтроку("Счет из файла успешно сохранен в базу");
			КонецЕсли;
#КонецОбласти			
		Иначе	     // это не счет на оплату покупателю - просто пытаемся записать
			Попытка              // записываем прочитаенное из файла в базу
				ЗаписанноеЗначение.Записать();
			Исключение
				ТекстОшибки = ОписаниеОшибки();
				//Если НЕ ПродолжитьЗагрузкуВСлучаеВозникновенияОшибки Тогда
				//	
				//	ВосстановитьИспользованиеИтогов();
				//	ВызватьИсключение;
				//	
				//Иначе
				Попытка
					СообщениеОбОшибке = "Ошибка при загрузке данных. Объект: " + ЗаписанноеЗначение + ", Тип: " + ТипЗнч(ЗаписанноеЗначение) + " Ошибка : " + ТекстОшибки;
					Журнал.ДобавитьСтроку(СообщениеОбОшибке);
					Сообщить(СообщениеОбОшибке, СтатусСообщения.Важное);
				Исключение
					СообщениеОбОшибке = "Ошибка при загрузке данных. Ошибка : " + ТекстОшибки;
					Журнал.ДобавитьСтроку(СообщениеОбОшибке);
					Сообщить(СообщениеОбОшибке, СтатусСообщения.Важное);
				КонецПопытки;	
				
				//Попытка
				//	Сообщить("Ошибка при загрузке данных. Объект: " + ЗаписанноеЗначение + ", Тип: " + ТипЗнч(ЗаписанноеЗначение) + "
				//	|Ошибка : " + ТекстОшибки, СтатусСообщения.Важное);
				//Исключение
				//	Сообщить("Ошибка при загрузке данных.
				//	|Ошибка : " + ТекстОшибки, СтатусСообщения.Важное);
				//КонецПопытки;	
				
				//КонецЕсли;
				Загружено = Загружено - 1;
			КонецПопытки;	
			Загружено = Загружено + 1;
		КонецЕсли;
		
	КонецЦикла;
#КонецОбласти	
	//ВосстановитьИспользованиеИтогов();
#Область Заканчиваем_читать_файл_XML	
	// проверка формата файла обмена
	Если ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента
		Или ЧтениеXML.ЛокальноеИмя <> ЛокальноеИмя Тогда
		
		СообщитьПользователю(Нстр("ru = 'Неверный формат файла выгрузки'"));
		Журнал.ДобавитьСтроку("Неверный формат файла выгрузки");
		Перейти ~ЗаписатьЖурналИВыйти;
	КонецЕсли;
	
	Если Не ЧтениеXML.Прочитать()
		Или ЧтениеXML.ТипУзла <> ТипУзлаXML.КонецЭлемента
		Или ЧтениеXML.ЛокальноеИмя <> "_1CV8DtUD"
		Или ЧтениеXML.URIПространстваИмен <> "http://www.1c.ru/V8/1CV8DtUD/" Тогда
		
		СообщитьПользователю(Нстр("ru = 'Неверный формат файла выгрузки'"));
		Журнал.ДобавитьСтроку("Неверный формат файла выгрузки");
		Перейти ~ЗаписатьЖурналИВыйти;
	КонецЕсли;
	
	ЧтениеXML.Закрыть();
	СообщитьПользователю(Нстр("ru = 'Загружено объектов: '") + Загружено);
	Журнал.ДобавитьСтроку("Загружено объектов: " + Строка(Загружено));
	Если (Загружено > 0) Тогда
		СообщитьПользователю(Нстр("ru = 'Окончание загрузки: '") + ТекущаяДатаСеанса());
		СообщитьПользователю(Нстр("ru = 'Загрузка данных успешно завершена'"));
		
		//---------------------------------------------------------------------------	
		//Журнал.ДобавитьСтроку(Строка(ВсегоОбработанныхЗаписей()) + " записей");
		
		Журнал.ДобавитьСтроку("Окончание загрузки: " + Формат(ТекущаяДата(),"ДЛФ=DT"));
		Журнал.ДобавитьСтроку("-------------------------------------------------------------------");
	КонецЕсли;
#КонецОбласти

	//Двоичное=Новый ДвоичныеДанные(ИмяВременногоФайла);  // получаем двоичные данные из файла
	//Адрес = ПоместитьВоВременноеХранилище(Двоичное, УИД); // кидаем двоичные данные во врем. хранилище
	//Адреса.Добавить(Адрес);
~ЗаписатьЖурналИВыйти:	
	Журнал.Записать(ИмяЖурнала, );    
	Двоичное=Новый ДвоичныеДанные(ИмяЖурнала);  // получаем двоичные данные из файла
    Адрес = ПоместитьВоВременноеХранилище(Двоичное, Новый УникальныйИдентификатор); // кидаем двоичные данные во врем. хранилище
	Адреса.Добавить(Адрес);
	Возврат Адреса;
КонецФункции


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

Функция СведенияОВнешнейОбработке() Экспорт
  ПараметрыРегистрации = Новый Структура;
  ПараметрыРегистрации.Вставить("Вид", "ДополнительнаяОбработка");
  ПараметрыРегистрации.Вставить("Наименование", "Выгрузка справочников и счетов для ДДС"); //Наименование обработки, которым будет заполнено наименование элемента справочника
  ПараметрыРегистрации.Вставить("Версия", "1.0");
  ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
  ПараметрыРегистрации.Вставить("Информация", "Выгрузка справочников и счетов для ДДС"); //Краткая информация по обработке, описание обработки
  ПараметрыРегистрации.Вставить("ВерсияБСП", "1.2.1.4");
  ТаблицаКоманд = ПолучитьТаблицуКоманд();
  ДобавитьКоманду(ТаблицаКоманд,
          "Выгрузить справочники и счета для ДДС", //представление команды в пользовательском интерфейсе
          "ВыгрузитьСправочникиДДС", //идентификатор команды; любая строка, уникальная в пределах данной обработки
          "ВызовСерверногоМетода");
  ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
  Возврат ПараметрыРегистрации;
КонецФункции

Функция ПолучитьТаблицуКоманд()
  Команды = Новый ТаблицаЗначений;
  Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
  Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
  Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
  Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
  Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
  Возврат Команды;
КонецФункции  

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
  НоваяКоманда = ТаблицаКоманд.Добавить();
  НоваяКоманда.Представление = Представление;
  НоваяКоманда.Идентификатор = Идентификатор;
  НоваяКоманда.Использование = Использование;
  НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
  НоваяКоманда.Модификатор = Модификатор;
КонецПроцедуры

Процедура ВыполнитьКоманду(ИдентификаторКоманды, ПараметрыВыполненияКоманды) Экспорт
  // Реализация логики команды
  Если ИдентификаторКоманды = "ВыгрузитьСправочникиДДС" Тогда
	  
	  //ЭтоИсходнаяБаза = Истина;
	  //КаталогВыгрузки = "с:\tmp\XML Process\xml\";
	  //
	  //ИмяЖурнала = КаталогВыгрузки + "МУ.log";
	  ПериодВыгружаемыхДанных.ДатаНачала = НачалоМесяца(НачалоМесяца(ТекущаяДатаСеанса())-1);
	  ПериодВыгружаемыхДанных.ДатаОкончания = КонецМесяца(ТекущаяДатаСеанса());
	  
	  
	  ПутьКФайлуОбработки_ = "c:\tmp\XML Process\";
	  ИмяФайлаНастроек = "c:\tmp\НастройкиКР.txt";
	  
	  
	  ЭтоИсходнаяБаза = ПрочитатьЗначениеНастройкиИз(ИмяФайлаНастроек, "ЭтоИсходнаяБаза", Истина) = "1";		// вычислить по свойствам или наименованию конфигурации
	  ОчищатьЖурнал = ПрочитатьЗначениеНастройкиИз(ИмяФайлаНастроек, "ОчищатьЖурнал", Ложь) = "1";
	  ПутьКФайлуВнешнейУтилиты = ПрочитатьЗначениеНастройкиИз(ИмяФайлаНастроек, "ПутьКФайлуВнешнейУтилиты", ПутьКФайлуОбработки_ + "XMLLoadTool.exe");
	  КаталогВыгрузки = ПрочитатьЗначениеНастройкиИз(ИмяФайлаНастроек, "КаталогВыгрузки", ПутьКФайлуОбработки_);
	  ФайлЖурнала = ПрочитатьЗначениеНастройкиИз(ИмяФайлаНастроек, "ФайлЖурнала", КаталогВыгрузки+"DDS.log");
	  НовыйПрефиксДокумента = ПрочитатьЗначениеНастройкиИз(ИмяФайлаНастроек, "НовыйПрефиксДокумента", "КР");
	  ЗаменятьПрефикс = НовыйПрефиксДокумента <> "";
	  ЗаменятьПрефикс = Истина;
	  
	  ИменаВыгружаемыхФайлов = Новый СписокЗначений;
	  Индекс = 0;
	  Пока Истина Цикл
		  ИмяФайла = ПрочитатьЗначениеНастройкиИз(ИмяФайлаНастроек, "Файл" + Строка(Индекс), "");	  
		  Если ИмяФайла = "" Тогда
			  Прервать;
		  Иначе
			  ИменаВыгружаемыхФайлов.Добавить(КаталогВыгрузки + ИмяФайла);	
			  Индекс = Индекс + 1;
		  КонецЕсли;
		  
	  КонецЦикла;
	  
	  
	  //Если Прав(КаталогВыгрузки, 1) <> "\" Тогда
	  //    КаталогВыгрузки = КаталогВыгрузки + "\";
	  //КонецЕсли;
	  
	  //Если ЭтоИсходнаяБаза Тогда 
	  //    Суффикс = "_src.xml";	
	  //    ИменаВыгружаемыхФайлов.Добавить(КаталогВыгрузки + "payments.xml");
	  //    ИменаВыгружаемыхФайлов.Добавить(КаталогВыгрузки + "References" + Суффикс);
	  //    ИменаВыгружаемыхФайлов.Добавить(КаталогВыгрузки + "doc_status" + Суффикс);
	  //Иначе
	  //Суффикс = "_dst.xml";	
	  //ФайлСправочниковДДС = ПрочитатьЗначениеНастройкиИз(ИмяФайлаНастроек, "Файл0", КаталогВыгрузки + "References" + Суффикс);
	  //ФайлКопии = "Y:\References" + Суффикс;
	  //ИменаВыгружаемыхФайлов.Добавить(КаталогВыгрузки + "References" + Суффикс);
	  //КонецЕсли;
	  
	  Для каждого ИмяФайлаВыгрузки Из ИменаВыгружаемыхФайлов Цикл 
	      ВыполнитьВыгрузку(Строка(ИмяФайлаВыгрузки.Значение), Новый УникальныйИдентификатор, НовыйПрефиксДокумента, ФайлЖурнала);
	  КонецЦикла;
	  //ВыполнитьВыгрузку(ФайлСправочниковДДС, Новый УникальныйИдентификатор, , ФайлЖурнала);
	  //КопироватьФайл(ФайлСправочниковДДС, ФайлКопии);
  КонецЕсли;
  
КонецПроцедуры

Функция ПрочитатьЗначениеНастройкиИз(ИмяФайла, ИмяНастройки, ЗначениеПоУмолчанию = "")
	//Если НЕ ФайлСуществует(ИмяФайла) Тогда Возврат ЗначениеПоУмолчанию; КонецЕсли;
    Если ИмяНастройки="" Тогда Возврат ЗначениеПоУмолчанию; КонецЕсли;
	ФайлНастроек = Новый ТекстовыйДокумент;
	ФайлНастроек.Прочитать(ИмяФайла, КодировкаТекста.UTF8, Символы.ВК + Символы.ПС);
	
	Для Индекс = 1 По ФайлНастроек.КоличествоСтрок() Цикл
		ТекСтрока = ФайлНастроек.ПолучитьСтроку(Индекс);
		
		Если Найти(ТекСтрока, ИмяНастройки) <> 0 Тогда
			ЗначениеНастройки = СокрЛП(Прав(ТекСтрока, СтрДлина(ТекСтрока)-СтрДлина(ИмяНастройки + " = ")));
			Возврат ЗначениеНастройки;
		КонецЕсли;
	КонецЦикла;
	Возврат ЗначениеПоУмолчанию;
КонецФункции

Функция ПутьКФайлуОбработки()
	
	ПутьИИмя = ИспользуемоеИмяФайла;
	
	Путь = "";
	Имя  = "";
	ПозСлэш = Найти(ПутьИИмя,"\");
	Пока ПозСлэш > 0 Цикл
		Путь = Путь+Сред(ПутьИИмя,1,ПозСлэш);
		ПутьИИмя = Сред(ПутьИИмя,ПозСлэш+1);
		ПозСлэш = Найти(ПутьИИмя,"\");
	КонецЦикла;
	Имя = ПутьИИмя;
	//Сообщить(Путь);
	//Сообщить(Имя);	
	Возврат Путь;
КонецФункции
